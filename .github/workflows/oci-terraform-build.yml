name: 'Terraform Build'

on:
  push:
    branches:
    - main
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform Build'
    runs-on: ubuntu-latest
    environment: mvp
    env:
      OCI_PIPELINE_PLAN: "oci-pipline.plan"
      TERRAFORM_PATH: "terraform"
      OCI_SHORTHAND_PROJECT_NAME: "dw"
      OCI_SHORTHAND_ENVIRONMENT: "mvp"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: bridgecrewio/checkov-action@v12.641.0
      - uses: hashicorp/setup-terraform@v1.2.1
      - uses: actions/checkout@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init & Plan
        working-directory: ./terraform
        run: |
          terraform init \
          -backend-config="address=${TF_VAR_OCI_OBJECT_STORE_ADDRESS}" && \
          terraform plan -out ${OCI_PIPELINE_PLAN}
        env:
          TF_VAR_OCI_SHORT: ${{ env.OCI_SHORTHAND_PROJECT_NAME }}
          TF_VAR_OCI_ENV: ${{ env.OCI_SHORTHAND_ENVIRONMENT }}
          TF_VAR_OCI_FINGERPRINT: ${{ secrets.TF_VAR_OCI_FINGERPRINT }}
          TF_VAR_OCI_OBJECT_STORE_ADDRESS: ${{ secrets.TF_VAR_OCI_OBJECT_STORE_ADDRESS }}
          TF_VAR_OCI_PRIVATE_KEY: ${{ secrets.TF_VAR_OCI_PRIVATE_KEY }}
          TF_VAR_OCI_REGION: ${{ secrets.TF_VAR_OCI_REGION }}
          TF_VAR_OCI_TENANCY_OCID: ${{ secrets.TF_VAR_OCI_TENANCY_OCID }}
          TF_VAR_OCI_USER_OCID: ${{ secrets.TF_VAR_OCI_USER_OCID }}
          TF_VAR_OCI_SSH_PUB_KEY: ${{ secrets.TF_VAR_OCI_SSH_PUB_KEY }}
          TF_VAR_OCI_SSH_PRIV_KEY: ${{ secrets.TF_VAR_OCI_SSH_PRIV_KEY }}

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@v12.641.0
        with:
          directory: ./terraform
          skip_check: # optional
          
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve ${OCI_PIPELINE_PLAN}
        env:
          TF_VAR_OCI_SHORT: ${{ env.OCI_SHORTHAND_PROJECT_NAME }}
          TF_VAR_OCI_ENV: ${{ env.OCI_SHORTHAND_ENVIRONMENT }}
