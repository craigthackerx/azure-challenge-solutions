name: 'Terraform Build'

#Build can only be ran manually or on PR to main
on:
  push:
    branches:
    - main
  pull_request:
    types: [closed]
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform CI'
    runs-on: ubuntu-latest
    environment: mvp
    env:
      PIPELINE_PLAN: "pipeline.plan"
      TERRAFORM_PATH: "terraform"
      SHORTHAND_PROJECT_NAME: "hw"
      SHORTHAND_ENVIRONMENT: "mvp"
      TERRAFORM_COMPLIANCE_POLICY: "https://github.com/craigthackerx/azure-terraform-compliance-naming-convention.git"


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: hashicorp/setup-terraform@v1.2.1
      - uses: actions/checkout@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init & Plan
        working-directory: ./terraform
        run: |

          rm -rf .terraform && \
          mkdir -p .terraform && \

          terraform init \
          -backend-config="storage_account_name=${TF_VAR_AZURE_BACKEND_SA_NAME}" \
          -backend-config="access_key=${TF_VAR_AZURE_BACKEND_SA_KEY}" \
          -backend-config="container_name=${TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME}" \
          -backend-config="key=${TF_VAR_AZURE_SHORT}-${TF_VAR_AZURE_ENV}.terraform.tfstate" && \

          printf '%s' "${TF_VAR_AZURE_ENV}" > .terraform/environment && \

          terraform workspace select "${TF_VAR_AZURE_ENV}" && \

          terraform plan -out ${PIPELINE_PLAN}

        env:
          TF_VAR_AZURE_SHORT: ${{ env.SHORTHAND_PROJECT_NAME }}
          TF_VAR_AZURE_ENV: ${{ env.SHORTHAND_ENVIRONMENT }}

          TF_VAR_AZURE_BACKEND_SA_NAME: ${{ secrets.TF_VAR_AZURE_BACKEND_SA_NAME }}
          TF_VAR_AZURE_BACKEND_SA_KEY: ${{ secrets.TF_VAR_AZURE_BACKEND_SA_KEY}}
          TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME: ${{ secrets.TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME }}

          TF_VAR_AZURE_CLIENT_ID: ${{ secrets.TF_VAR_AZURE_CLIENT_ID }}
          TF_VAR_AZURE_CLIENT_SECRET: ${{ secrets.TF_VAR_AZURE_CLIENT_SECRET }}
          TF_VAR_AZURE_TENANT_ID: ${{ secrets.TF_VAR_AZURE_TENANT_ID}}
          TF_VAR_AZURE_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_AZURE_SUBSCRIPTION_ID}}

      - name: Checkov GitHub Action
        uses: bridgecrewio/checkov-action@v12.641.0
        with:
          directory: ./terraform
          skip_check:

      - name: terraform-compliance
        uses: terraform-compliance/github_action@0.3.0
        with:
          plan: ${{ env.TERRAFORM_PATH}}/${{ env.PIPELINE_PLAN}}
          features: ${{ env.TERRAFORM_COMPLIANCE_POLICY}}


      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve ${PIPELINE_PLAN}
        env:
          TF_VAR_AZURE_SHORT: ${{ env.AZURE_SHORTHAND_PROJECT_NAME }}
          TF_VAR_AZURE_ENV: ${{ env.AZURE_SHORTHAND_ENVIRONMENT }}

