pipeline {

    agent any


    environment {
        PIPELINE_PLAN = "pipeline.plan"
        TERRAFORM_PATH = "terraform"
        SHORTHAND_PROJECT_NAME = "hw"
        SHORTHAND_ENVIRONMENT_NAME = "mvp"

        TF_VAR_short = ${env.SHORTHAND_PROJECT_NAME}
        TF_VAR_env = ${env.SHORTHAND_ENVIRONMENT_NAME}

        CHECKOV_SKIP_TEST = ""
        TERRAFORM_COMPLIANCE_POLICY = "https://github.com/craigthackerx/azure-terraform-compliance-naming-convention.git//?ref=main"

        TF_VAR_BACKEND_SA_NAME = credentials('TF_VAR_AZURE_BACKEND_SA_NAME')
        TF_VAR_AZURE_BACKEND_SA_KEY = credentials('TF_VAR_AZURE_BACKEND_SA_KEY')
        TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME = credentials('TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME')

        TF_VAR_AZURE_CLIENT_ID = credentials('TF_VAR_AZURE_CLIENT_ID')
        TF_VAR_AZURE_CLIENT_SECRET = credentials('TF_VAR_AZURE_CLIENT_SECRET')
        TF_VAR_AZURE_TENANT_ID = credentials('TF_VAR_AZURE_TENANT_ID')
        TF_VAR_AZURE_SUBSCRIPTION_ID = credentials('TF_VAR_AZURE_SUBSCRIPTION_ID')
    }

    stages {

        stage('Terraform Init and Plan') {
            steps {
                dir('${env.TERRAFORM_PATH}') {
                        sh '''
                           rm -rf .terraform && \
                           mkdir -p .terraform && \

                           terraform init \
                           -backend-config="storage_account_name=${TF_VAR_AZURE_BACKEND_SA_NAME}" \
                           -backend-config="access_key=${TF_VAR_AZURE_BACKEND_SA_KEY}" \
                           -backend-config="container_name=${TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME}" \
                           -backend-config="key=${TF_VAR_short}-${TF_VAR_env}.terraform.tfstate" && \

                           printf '%s' "${TF_VAR_env}" > .terraform/environment && \

                           terraform workspace select "${TF_VAR_env}" && \

                           terraform plan -out ${PIPELINE_PLAN} && \

                           terraform validate
                }    '''
            }
        }
    }

        stage('CheckOv') {
            steps {
                dir('${env.TERRAFORM_PATH}') {
                    script {
                        sh '''
                        terraform show -json ${PIPELINE_PLAN} > ${PIPELINE_PLAN}.json && \
                        checkov -f ${PIPELINE_PLAN}.json --skip-check ${CHECKOV_SKIP_TESTS}
                        '''
                    }
                }
            }
        }


        stage('Terraform-Compliance') {
            steps {
                dir('${env.TERRAFORM_PATH}') {
              script {
                  sh '''
                     terraform-compliance -p ${PIPELINE_PLAN} -f ${TERRAFORM_COMPLIANCE_PATH}
                     '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
     }
   }
}
