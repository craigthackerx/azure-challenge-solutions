pipeline {

    agent any


    environment {
        PIPELINE_PLAN = "pipeline.plan"
        TERRAFORM_PATH = "terraform"
        SHORTHAND_PROJECT_NAME = "hw"
        SHORTHAND_ENVIRONMENT_NAME = "mvp"

        TF_VAR_AZURE_SHORT = ${SHORTHAND_PROJECT_NAME}
        TF_VAR_AZURE_ENV = ${SHORTHAND_ENVIRONMENT_NAME}

        TF_VAR_BACKEND_SA_NAME = credentials('TF_VAR_AZURE_BACKEND_SA_NAME')
        TF_VAR_AZURE_BACKEND_SA_KEY = credentials('TF_VAR_AZURE_BACKEND_SA_KEY')
        TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME = credentials('TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME')

        TF_VAR_AZURE_CLIENT_ID = credentials('TF_VAR_AZURE_CLIENT_ID')
        TF_VAR_AZURE_CLIENT_SECRET = credentials('TF_VAR_AZURE_CLIENT_SECRET')
        TF_VAR_AZURE_TENANT_ID = credentials('TF_VAR_AZURE_TENANT_ID')
        TF_VAR_AZURE_SUBSCRIPTION_ID = credentials('TF_VAR_AZURE_SUBSCRIPTION_ID')
    }

    stages {

        stage('Terraform Init and Plan') {
            steps {
                script {
                    sh '''
                      terraform init \
                      backend-config="storage_account_name=${TF_VAR_AZURE_BACKEND_SA_NAME}" \
                      -backend-config="access_key=${TF_VAR_AZURE_SA_KEY}" \
                      -backend-config="container_name=${TF_VAR_AZURE_BACKEND_SA_CONTAINER_NAME}" \
                      -backend-config="key=${TF_VAR_AZURE_SHORT}-${TF_VAR_AZURE_ENV}.terraform.tfstate" && \
                      terraform plan -out ${PIPELINE_PLAN}
                    '''
                }
            }
        }

        stage('CheckOv') {
            steps {
                script {

                    }
                }
            }
        }


        stage('Terraform-Compliance') {
            steps {
                script {

                }
            }
        }

    post {
        always {
            cleanWs()
        }
    }
}
