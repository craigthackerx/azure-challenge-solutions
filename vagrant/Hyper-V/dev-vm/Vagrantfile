# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
  config.vm.box = "generic/oracle8"
  config.vm.hostname = "dev-vm"

  config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.network "forwarded_port", guest: 8090, host: 8090
  config.vm.network "public_network"

  config.vm.synced_folder "../../../../azure-challenge-solutions", "/home/vagrant/azure-challenge-solutions"

  
  config.vm.provider "hyper-v" do |hv|
    hv.cpus = "2"
    hv.memory = "4096"
    hv.name = "dev-vm"
    hv.enable_virtualization_extensions = true
    hv.linked_clone = true
    hv.gui = true
  end

  config.vm.provision "shell", inline: <<-SHELL
      set -xeuo pipefail

      #Add Timezone'
      ln -snf /usr/share/zoneinfo/Europe/London /etc/localtime && echo Europe/London > /etc/timezone && \
      
      #Install packages
      
      yum update -y && \ 
      yum install -y \
      yum-utils \
      git \
      dnf-plugins-core \
      curl \
      git \
      zip \
      unzip && \

      yum update -y && \
      yum install -y \
      python3-pip \
      podman \
      dos2unix \
      openssl \
      wget \
      nano 

      #Clean up installs
      yum clean all && \

      firewall-cmd --zone=public --add-port=8080/tcp && \
      firewall-cmd --zone=public --add-port=8090/tcp && \
      firewall-cmd --reload

      #Configure ssh
      systemctl enable ssh && \
      systemctl restart ssh

      echo vagrant:vagrant | chpasswd && \
      loginctl enable-linger 1000

      echo "Vagrant build done for root"

  SHELL

  config.vm.provision "shell", privileged: false, inline: <<-SHELL

   set -xeuo pipefail
  
    if [ "$(command -v pip3)" ]; then
  
      export PATH=$PATH:${HOME}/.local/bin && \

      pip3 install --user podman-compose && \
  
      cd azure-challenge-solutions/container/podman/grafana && \
      mkdir -p grafana-data && \
      systemctl --user enable --now dbus.socket && \
      echo "The VM is now setup.  On your host, run vagrant ssh and then  cd azure-challenge-solutions/container/podman/ && podman-compose up -d" && \
      
      cd .. && podman-compose up -d
  
    else
      echo "Error running user script"
    fi
  SHELL
end